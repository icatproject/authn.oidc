<html>
<head>
<title>installation</title>
</head>
<body>

	<h1>Installation</h1>

	<h2>Compatibility</h2>
	This plugin will work with an ICAT version of 4.9.0 or greater.

	<h2>Prerequisites</h2>

	<ul>
		<li>
			The authn_oidc distribution:
			<a href="${repoUrl}/org/icatproject/authn.oidc/${project.version}/authn.oidc-${project.version}-distro.zip">
				authn_oidc-${project.version}-distro.zip
			</a>
		</li>
		<li>
			A suitable deployed container (here assumed to be Glassfish/Payara)
			to support a web application. Testing has been carried out with payara41.
			<a href="http://icatproject.org/installation/glassfish/">
				Glassfish/Payara installation instructions
			</a>
			are available.
		</li>

		<li>Python 3 installed on the server.</li>
	</ul>


	<h2>Summary of steps</h2>
	<ol>
		<li>
			Please follow
			<a href="http://icatproject.org/installation/component/">
				the generic installation instructions
			</a>
		</li>
		<li>
			Check that it works.
		</li>
	</ol>


	<h2>The setup.properties file</h2>
	<dl>
		<dt>container</dt>
		<dd>
			Values must be chosen from:
			<a target="_blank" href="http://www.eclipse.org/eclipselink/api/2.6/org/eclipse/persistence/config/TargetServer.html">
				TargetServer
			</a>
			Though only Glassfish is working properly at the moment.
		</dd>
		<dt>home</dt>
		<dd>
			is the top level of the container installation.
			For Glassfish it must contain "glassfish/domains" and
			for JBoss (wildfly) it must contain jboss-modules.jar.
		</dd>
		<dt>port</dt>
		<dd>
			is the administration port of the container
			which is typically 4848 for Glassfish and 9990 for JBoss.
		</dd>
		<dt>secure</dt>
		<dd>
			must be set to true or false.
			If true then only https and not http connections will be allowed.
		</dd>
	</dl>


	<h2>The logback.xml file</h2>
	<p>
		If you wish to modify the provided logging levels then rename
		logback.xml.example to logback.xml and edit it to suit your needs.
	</p>


	<h2>The run.properties file</h2>
	<dl>
		<dt>wellKnownUrl</dt>
		<dd>
			The well-known OpenID configuration URL of the token issuer. It is
			expected to specify a jwks_uri. Only tokens that can be validated
			using a key from the jwks_uri will be accepted by authn.oidc.
		</dd>
		<dd>
			In the case of Keycloak, it should look like this: <br />
			<code>https://example.org/auth/realms/example/.well-known/openid-configuration</code>
		</dd>
		<dt>tokenIssuer</dt>
		<dd>
			The name or URL of the token issuer. This must exactly match the
			'iss' claim encoded within the token and the 'issuer' attribute
			found at the <code>wellKnownUrl</code>.
		</dd>
		<dd>
			In the case of Keycloak, it should look like this: <br />
			<code>https://example.org/auth/realms/example</code>
		</dd>
		<dt>icatUserClaim</dt>
		<dd>
			The claim encoded within the token that shall be used as the ICAT
			username.
		</dd>
		<dt>icatUserClaimException</dt>
		<dd>
			By default, if no <code>icatUserClaim</code> is present in the
			token, authn.oidc falls back to using the 'sub' claim. If you would
			prefer an AuthnException to be thrown in this case, set this
			property to 'true'.
		</dd>
		<dt>requiredScope</dt>
		<dd>
			If you only want to allow tokens with a particular scope, you can
			specify it here. In this case, if a user tries to log in with a
			token that doesn't have this scope, an AuthnException gets thrown.
		</dd>
		<dt>ip</dt>
		<dd>
			If access to the OIDC authentication should only be allowed from
			certain IP addresses then provide a space separated list of allowed
			values. These take the form of an IPV4 or IPV6 address followed by
			the number of bits (starting from the most significant) to consider.
		</dd>
		<dt>mechanism</dt>
		<dd>
			If specified is a label to appear before the username as it is made
			available to ICAT for authorization. By default, this only affects
			usernames obtained from the 'sub' claim. For usernames from the
			<code>icatUserClaim</code>, authn.oidc tries to extract the
			mechanism from the username itself.
		</dd>
		<dd>
			For example, let's assume this is set to 'oidc'. If a token contains
			the <code>icatUserClaim</code> 'db/fred', then the username would be
			provided to ICAT as 'db/fred'. But if a token only contains the
			'sub' claim '37715', then the username would be provided to ICAT as
			'oidc/37715'.
		</dd>
		<dt>icatUserPrependMechanism</dt>
		<dd>
			Set this property to 'true' if you also want to prepend usernames
			from the <code>icatUserClaim</code> with the mechanism label. This
			only makes sense if the usernames encoded within the tokens don't
			already include a mechanism.
		</dd>
		<dd>
			For example, let's assume this is set to 'true' and the mechanism is
			set to 'oidc'. If a token contains the <code>icatUserClaim</code>
			'fred', then the username would be provided to ICAT as 'oidc/fred'.
			But if a token contains the <code>icatUserClaim</code> 'db/fred',
			then the username would be provided to ICAT as 'oidc/db/fred'.
		</dd>
	</dl>


	<h2>Check that authn.oidc works</h2>
	<p>
		A simple standalone test is to run:
		<blockquote>
			<code>curl -k https://localhost:8181/authn.oidc/description -w "\n"</code>
			which returns a description, <br />
			<code>curl -k https://localhost:8181/authn.oidc/version -w "\n"</code>
			which returns the version, <br />
			<code>curl -k https://localhost:8181/authn.oidc/jwkupdate -X POST</code>
			which triggers an update of the JWK configuration, and <br />
			<code>curl -k https://localhost:8181/authn.oidc/authenticate -w "\n"
			-d 'json={"credentials":[{"token":"&lt;token&gt;"}]}'</code>
			to authenticate.
		</blockquote>
	</p>

</body>
</html>
